{"version":3,"sources":["components/PostItem.tsx","components/PostsList.tsx","utils/fetchClient.ts","api/comments.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/CommentItem.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostItem","post","selectedPost","setSelectedPostId","id","title","className","type","classNames","onClick","clickedPost","onFirstClick","handleSelectPost","PostsList","posts","map","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","addComments","newComment","deleteComments","commentId","Loader","NewCommentForm","isLoading","postId","onAddComment","useState","authorName","setAuthorName","authorEmail","setAuthorEmail","newCommentText","setNewCommentText","errEmptyAuthorName","setErrEmptyAuthorName","errEmptyAuthorEmail","setErrEmptyAuthorEmail","errEmptynewCommentText","setErrEmptyNewCommentText","onSubmit","event","preventDefault","name","email","htmlFor","placeholder","value","onChange","target","required","pattern","CommentItem","comment","deleteComment","href","PostDetails","onNewCommentFormOpened","isNewCommentFormOpened","comments","setComments","isErrOnLoadCom","setIsErrOnLoadCom","setIsLoading","loadComments","a","loadedComments","useEffect","removeComment","currentComments","filter","com","Error","addedComment","prevComments","isNoCommentYet","length","isWriteBtnVisible","UserSelector","users","selectedUserId","onSelectUserId","onOpenListUser","setOnOpenListUser","selectedUser","find","user","toggleUserList","prev","role","userId","getPosts","App","setUsers","setSelectedUserId","setPosts","selectedPostId","isErorrPostLoading","setIsErorrPostLoading","setIsNewCommentFormOpened","loadUsers","loadedUsers","loadPosts","loadedPosts","selectUserId","useCallback","selectPostId","isNoPostYet","isVisiblePost","isVisibleSidebar","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eac0dbaf.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post;\n  selectedPost: Post | undefined;\n  setSelectedPostId: (idpost: number | null) => void;\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  selectedPost,\n  setSelectedPostId,\n}) => {\n  const handleSelectPost = (clickedPost: Post) => {\n    const onFirstClick = post.id !== selectedPost?.id;\n\n    if (onFirstClick) {\n      setSelectedPostId(clickedPost.id);\n    } else {\n      setSelectedPostId(null);\n    }\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames(\n            'button is-link',\n            { 'is-light': selectedPost?.id !== post.id },\n          )}\n          onClick={() => handleSelectPost(post)}\n        >\n          {selectedPost?.id === post.id\n            ? 'Close'\n            : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | undefined;\n  setSelectedPostId: (postId: number | null) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPostId,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <PostItem\n            post={post}\n            key={post.id}\n            selectedPost={selectedPost}\n            setSelectedPostId={setSelectedPostId}\n          />\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComments = (newComment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', newComment);\n};\n\nexport const deleteComments = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  isLoading: boolean;\n  postId: number;\n  onAddComment: (newComment: Omit<Comment, 'id'>) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = (\n  {\n    isLoading,\n    postId,\n    onAddComment,\n  },\n) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [newCommentText, setNewCommentText] = useState('');\n  const [errEmptyAuthorName, setErrEmptyAuthorName] = useState(false);\n  const [errEmptyAuthorEmail, setErrEmptyAuthorEmail] = useState(false);\n  const [errEmptynewCommentText, setErrEmptyNewCommentText] = useState(false);\n\n  const onChangeAuthorName = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setErrEmptyAuthorName(false);\n    setAuthorName(event.target.value);\n  };\n\n  const onChangeAuthorEmail = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setErrEmptyAuthorEmail(false);\n    setAuthorEmail(event.target.value);\n  };\n\n  const onChangeCommentText = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setErrEmptyNewCommentText(false);\n    setNewCommentText(event.target.value);\n  };\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (\n      !authorName || !authorEmail || !newCommentText\n    ) {\n      setErrEmptyAuthorEmail(!authorEmail);\n      setErrEmptyAuthorName(!authorName);\n      setErrEmptyNewCommentText(!newCommentText);\n\n      return;\n    }\n\n    const newComment = {\n      postId,\n      name: authorName,\n      email: authorEmail,\n      body: newCommentText,\n    };\n\n    onAddComment(newComment);\n    setNewCommentText('');\n  };\n\n  const onClickCleanBtn = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setNewCommentText('');\n    setErrEmptyAuthorEmail(false);\n    setErrEmptyAuthorName(false);\n    setErrEmptyNewCommentText(false);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input', { 'is-danger': errEmptyAuthorName },\n            )}\n            value={authorName}\n            onChange={onChangeAuthorName}\n            required\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {errEmptyAuthorName && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            </>\n          )}\n        </div>\n\n        {errEmptyAuthorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"emeil\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            pattern=\"[^@]+@[^@]+\\.[a-zA-Z]{2,6}\"\n            className={classNames(\n              'input', { 'is-danger': errEmptyAuthorEmail },\n            )}\n            value={authorEmail}\n            onChange={onChangeAuthorEmail}\n            required\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errEmptyAuthorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errEmptyAuthorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea', { 'is-danger': errEmptynewCommentText },\n            )}\n            value={newCommentText}\n            onChange={onChangeCommentText}\n            required\n          />\n        </div>\n\n        {errEmptynewCommentText && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onClickCleanBtn}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment;\n  deleteComment: (commentId: number) => void;\n};\n\nexport const CommentItem: React.FC<Props> = ({\n  comment,\n  deleteComment,\n}) => {\n  const {\n    body,\n    email,\n    name,\n    id,\n  } = comment;\n\n  return (\n    <article\n      className=\"message is-small\"\n      data-cy=\"Comment\"\n    >\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {name}\n        </a>\n\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => deleteComment(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getComments, deleteComments, addComments } from '../api/comments';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { CommentItem } from './CommentItem';\n\ntype Props = {\n  selectedPost: Post;\n  isNewCommentFormOpened: boolean;\n  onNewCommentFormOpened: () => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  onNewCommentFormOpened,\n  isNewCommentFormOpened,\n}) => {\n  const { id, title, body } = selectedPost;\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isErrOnLoadCom, setIsErrOnLoadCom] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadComments = async () => {\n    try {\n      setIsLoading(true);\n      const loadedComments = await getComments(id);\n\n      setComments(loadedComments);\n    } catch {\n      setIsErrOnLoadCom(true);\n    } finally {\n      setIsErrOnLoadCom(false);\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, [id]);\n\n  const removeComment = async (commentId: number) => {\n    setComments(currentComments => currentComments.filter(\n      com => com.id !== commentId,\n    ));\n\n    try {\n      await deleteComments(commentId);\n    } catch {\n      throw new Error('Don\\'t delete comment');\n    }\n  };\n\n  const onAddComment = async (newComment: Omit<Comment, 'id'>) => {\n    try {\n      const addedComment = await addComments(newComment);\n\n      setComments(prevComments => [...prevComments, addedComment]);\n    } catch {\n      throw new Error('Don\\'t add comment');\n    }\n  };\n\n  const isNoCommentYet = !comments.length && !isLoading\n      && !isErrOnLoadCom;\n  const isWriteBtnVisible = !isErrOnLoadCom\n    && !isLoading && !isNewCommentFormOpened;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isErrOnLoadCom && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {isNoCommentYet && (\n\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n          { comments.length > 0 && !isLoading && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <CommentItem\n                  comment={comment}\n                  key={comment.id}\n                  deleteComment={removeComment}\n                />\n              ))}\n            </>\n          )}\n\n          {isWriteBtnVisible && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={onNewCommentFormOpened}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isNewCommentFormOpened && (\n          <NewCommentForm\n            isLoading={isLoading}\n            postId={selectedPost.id}\n            onAddComment={onAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUserId: number;\n  onSelectUserId: (userId: number) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUserId,\n  onSelectUserId,\n}) => {\n  const [onOpenListUser, setOnOpenListUser] = useState(false);\n\n  const selectedUser = users.find(\n    user => user.id === selectedUserId,\n  );\n\n  const toggleUserList = () => {\n    setOnOpenListUser(prev => !prev);\n  };\n\n  const onSelectUser = (userId: number) => {\n    onSelectUserId(userId);\n    toggleUserList();\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': onOpenListUser })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleUserList}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => onSelectUser(user.id)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, {\n  useState,\n  useCallback,\n  useEffect,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(0);\n  const [isErorrPostLoading, setIsErorrPostLoading] = useState(false);\n  const [isNewCommentFormOpened, setIsNewCommentFormOpened] = useState(false);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    } catch {\n      throw new Error('Can\\'t load users');\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadPosts = async (userId: number) => {\n    try {\n      setIsLoading(true);\n      const loadedPosts = await getPosts(userId);\n\n      setPosts(loadedPosts);\n    } catch {\n      setIsErorrPostLoading(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPosts(selectedUserId);\n  }, [selectedUserId]);\n\n  const selectUserId = useCallback((userId: number) => {\n    setSelectedUserId(userId);\n  }, []);\n\n  const selectedPost = posts.find(post => post.id === selectedPostId);\n\n  const selectPostId = useCallback((postId: number | null) => {\n    setSelectedPostId(prev => (prev !== postId ? postId : 0));\n    setIsNewCommentFormOpened(false);\n  }, []);\n\n  const isNoPostYet = selectedUserId !== 0 && posts.length === 0 && !isLoading;\n  const isVisiblePost = selectedUserId !== 0 && posts.length > 0;\n  const isVisibleSidebar = selectedPost?.userId === selectedUserId;\n\n  const onNewCommentFormOpened = useCallback(() => {\n    setIsNewCommentFormOpened(true);\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  onSelectUserId={selectUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isErorrPostLoading && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isNoPostYet && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {isVisiblePost && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPostId={selectPostId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isVisibleSidebar },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isNewCommentFormOpened={isNewCommentFormOpened}\n                  onNewCommentFormOpened={onNewCommentFormOpened}\n                />\n              </div>\n            )}\n          </div>\n\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}